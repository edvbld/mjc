PARSER_BEGIN(MJParser)
    package se.helino.mjc;

    import java.util.ArrayList;

    public class MJParser { }
PARSER_END(MJParser)

SKIP:
{
  " "
| "\r\n"
| "\n"
| "\t"
}

TOKEN:
{
  <MAIN: <PUBLIC>(<WS>)+"static"(<WS>)+"void"(<WS>)+"main">
| <PRINT: "System"(<WS>)*<DOT>(<WS>)*"out"(<WS>)*<DOT>(<WS>)*"println">
| <DOT: ".">
| <PUBLIC: "public">
| <CLASS: "class">
| <THIS: "this">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <NEW: "new">
| <TRUE: "true">
| <FALSE: "false">
| <LENGTH: "length">
| <BOOLEAN: "boolean">
| <INT: "int">
| <STRING: "String">
| <RETURN: "return">
| <AND: "&&">
| <LESS: "<">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
| <BANG: "!">
| <COMMA: ",">
| <SEMICOLON: ";">
| <EQUALS: "=">
| <LPAREN: "(">
| <RPAREN: ")">
| <LCURLY: "{">
| <RCURLY: "}">
| <LSQUARE: "[">
| <RSQUARE: "]">
| <IDENTIFIER: (<LETTER>|<UNDERSCORE>)(<LETTER>|<DIGIT>|<UNDERSCORE>)*>
| <NUMBER: <DIGIT>(<DIGIT>)*>
| <#LETTER: ["a"-"z", "A"-"Z"]>
| <#DIGIT: ["0"-"9"]>
| <#UNDERSCORE: "_">
|  <#WS: (" "|"\t"|"\n"|"\r\n")>
}

MJProgram ProgramProd():
{
    MJProgram p = new MJProgram();
    MJMainClass mc;
    MJClass c;
}
{
    mc = MainClassProd()
    { p.setMJMainClass(mc); }
    (
        c = ClassProd() 
        { p.addMJClass(c); }
    )*
    { return p; }
}

MJMainClass MainClassProd():
{
    MJIdentifier classId, argId;
}
{
    <CLASS> classId = IdentifierProd() <LCURLY>
    <MAIN> <LPAREN> <STRING> <LSQUARE> <RSQUARE> argId = IdentifierProd()
    <RPAREN> <LCURLY> <RCURLY> <RCURLY>
    { return new MJMainClass(classId, argId); }
}

MJClass ClassProd(): 
{
    MJIdentifier id;
}
{
    <CLASS> id = IdentifierProd() <LCURLY> <RCURLY>
    { return new MJClass(id); }
}

MJIdentifier IdentifierProd():
{
    Token t;
}
{
    t = <IDENTIFIER>
    { return new MJIdentifier(t.image); }
}
