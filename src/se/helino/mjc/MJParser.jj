PARSER_BEGIN(MJParser)
    package se.helino.mjc;

    import java.util.ArrayList;

    public class MJParser { }
PARSER_END(MJParser)

SKIP:
{
  " "
| "\r\n"
| "\n"
| "\t"
}

TOKEN:
{
  <MAIN: <PUBLIC>(<WS>)+"static"(<WS>)+"void"(<WS>)+"main">
| <PRINT: "System"(<WS>)*<DOT>(<WS>)*"out"(<WS>)*<DOT>(<WS>)*"println">
| <DOT: ".">
| <PUBLIC: "public">
| <CLASS: "class">
| <THIS: "this">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <NEW: "new">
| <TRUE: "true">
| <FALSE: "false">
| <LENGTH: "length">
| <BOOLEAN: "boolean">
| <INT: "int">
| <STRING: "String">
| <RETURN: "return">
| <AND: "&&">
| <LESS: "<">
| <PLUS: "+">
| <MINUS: "-">
| <STAR: "*">
| <BANG: "!">
| <COMMA: ",">
| <SEMICOLON: ";">
| <EQUALS: "=">
| <LPAREN: "(">
| <RPAREN: ")">
| <LCURLY: "{">
| <RCURLY: "}">
| <LSQUARE: "[">
| <RSQUARE: "]">
| <IDENTIFIER: (<LETTER>|<UNDERSCORE>)(<LETTER>|<DIGIT>|<UNDERSCORE>)*>
| <NUMBER: <DIGIT>(<DIGIT>)*>
| <#LETTER: ["a"-"z", "A"-"Z"]>
| <#DIGIT: ["0"-"9"]>
| <#UNDERSCORE: "_">
|  <#WS: (" "|"\t"|"\n"|"\r\n")>
}

MJProgram ProgramProd():
{
    MJProgram p = new MJProgram();
    MJMainClass mc;
    MJClass c;
}
{
    mc = MainClassProd()
    { p.setMJMainClass(mc); }
    (
        c = ClassProd() 
        { p.addMJClass(c); }
    )*
    { return p; }
}

MJMainClass MainClassProd():
{
    MJIdentifier classId, argId;
    MJMainClass mc;
    MJStatement s;
}
{
    <CLASS> classId = IdentifierProd() <LCURLY>
    <MAIN> <LPAREN> <STRING> <LSQUARE> <RSQUARE> argId = IdentifierProd()
    <RPAREN> 
    { mc = new MJMainClass(classId, argId); }
    <LCURLY> 
    (
        s = StatementProd()
        { mc.addMJStatement(s); }
    )*
    <RCURLY> <RCURLY>
    { return mc; }
}

MJClass ClassProd(): 
{
    MJIdentifier id;
    MJClass mc;
    MJVarDecl vd;
    MJMethodDecl method;
}
{
    <CLASS> id = IdentifierProd() <LCURLY>
    { mc = new MJClass(id); }
    (
        vd = VarDeclProd()
        { mc.addMJVarDecl(vd); }
    )* 
    (
        method = MethodDeclProd()
        { mc.addMJMethod(method); }
    )*
    <RCURLY>
    { return mc; }
}

MJVarDecl VarDeclProd():
{
    MJIdentifier id;
    MJType t;
}
{
    t = TypeProd() id = IdentifierProd() <SEMICOLON>
    { return new MJVarDecl(t, id); }
}

MJType TypeProd():
{
    Token t;
    MJType type;
}
{
    t = <IDENTIFIER>
    { return new MJIdentifierType(t.image); }
|   type = BasicTypeProd()
    { return type; }
}

MJType BasicTypeProd(): {}
{
    <BOOLEAN>
    { return new MJBooleanType(); }
|   <INT> 
    (
        <LSQUARE> <RSQUARE>
        { return new MJIntArrayType();}
        |
        { return new MJIntType(); }
    )
}

MJIdentifier IdentifierProd():
{
    Token t;
}
{
    t = <IDENTIFIER>
    { return new MJIdentifier(t.image); }
}

MJMethodDecl MethodDeclProd():
{
    MJType t;
    MJIdentifier id;
    MJMethodArg arg = null;
    MJVarDecl vd;
    MJMethodDecl method;
    MJMethodBody body = null;
    MJExpression retExp;
}
{
    <PUBLIC> t = TypeProd() id = IdentifierProd() <LPAREN>
    { method = new MJMethodDecl(t, id); }
    (arg = MethodArgProd())?
    { method.addMJMethodArg(arg); }
    (
        <COMMA> arg = MethodArgProd()
        { method.addMJMethodArg(arg); }
    )*
    <RPAREN> <LCURLY>
    (body = MethodBodyProd())?
    { method.addMJMethodBody(body); }
    <RETURN> retExp = ExpressionProd() <SEMICOLON>
    { method.setReturnExpression(retExp); }
    <RCURLY>
    { return method; }
}

MJMethodBody MethodBodyProd():
{
    MJVarDecl vd;
    MJStatement s;
    MJMethodBody body = new MJMethodBody();
}
{
    LOOKAHEAD(2)
    (
        LOOKAHEAD(2)
        vd = VarDeclProd()
        { body.addMJVarDecl(vd); }
        |
        s = StatementProd()
        { body.addMJStatement(s); }
    )+
    {return body; }
    |
    (
        s = StatementProd()
        { body.addMJStatement(s); }
    )+
    {return body; }
}

MJMethodArg MethodArgProd():
{
    MJType t;
    MJIdentifier id;
}
{
    t = TypeProd() id = IdentifierProd()
    { return new MJMethodArg(t, id); }
}

MJStatement StatementProd():
{
    MJIdentifier id;
    MJExpression e1, e2;
    MJStatement stmt, stmt2, stmt3;
}
{
    stmt = AssingStatementProd()
    { return stmt; }
    |
    stmt = IfStatementProd()
    { return stmt; }
    |
    stmt = BlockStatementProd()
    { return stmt; }
    |
    stmt = WhileStatementProd()
    { return stmt; }
    |
    stmt = PrintStatementProd()
    { return stmt; }
}

MJStatement PrintStatementProd():
{
    MJExpression e;
}
{
    <PRINT> <LPAREN> e = ExpressionProd() <RPAREN> <SEMICOLON>
    { return new MJPrint(e); }
}

MJStatement WhileStatementProd():
{
    MJExpression e;
    MJStatement stmt;
}
{
    <WHILE> <LPAREN> e = ExpressionProd() <RPAREN> stmt = StatementProd()
    { return new MJWhile(e, stmt); }
}

MJStatement BlockStatementProd():
{
    MJBlock block = new MJBlock();
    MJStatement s;
}
{
    <LCURLY>
    (
        s = StatementProd()
        { block.addMJStatement(s); }
    )*
    <RCURLY>
    { return block; }
}

MJStatement IfStatementProd():
{
    MJExpression e;
    MJStatement stmt1, stmt2;
}
{
    <IF> <LPAREN> e = ExpressionProd() <RPAREN> stmt1 = StatementProd()
    <ELSE>  stmt2 = StatementProd()
    { return new MJIf(e, stmt1, stmt2); }
}

MJStatement AssingStatementProd():
{
    MJIdentifier id;
    MJExpression e1, e2;
    MJStatement stmt;
}
{
    id = IdentifierProd()
    (
        <LSQUARE> e1 = ExpressionProd() <RSQUARE> <EQUALS> e2 = ExpressionProd()
        <SEMICOLON>
        { stmt = new MJArrayAssign(id, e1, e2); }
        |
        <EQUALS> e1 = ExpressionProd() <SEMICOLON>
        { stmt = new MJAssign(id, e1); }
    )
    { return stmt; }
}

MJExpression ExpressionProd():
{
    MJExpression e1, e2;
}
{
    e1 = AdditiveExpProd() 
    (   
        <AND> e2 = ExpressionProd()
        { return new MJAnd(e1, e2); }
    )?
    { return e1; }
}

MJExpression AdditiveExpProd():
{
    MJExpression e;
}
{
    e = BasicExpProd()
    { return e; }
}

MJExpression BasicExpProd():
{
    MJExpression e;
}
{
    e = IdentifierExpProd()
    { return e; }
}

MJExpression IdentifierExpProd():
{
    Token t;
}
{
    t = <IDENTIFIER>
    { return new MJIdentifierExp(t.image); }
}
